generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model campaign_parties {
  id          Int        @id @default(autoincrement())
  campaign_id Int?
  party_id    Int?
  campaigns   campaigns? @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_parties_campaigns_campaign_id_fk")
  parties     parties?   @relation(fields: [party_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "campaign_parties_parties_party_id_fk")
}

model campaigns {
  id               Int                @id @default(autoincrement())
  image            String?            @db.VarChar
  name             String             @db.VarChar(250)
  description      String?            @db.VarChar(500)
  date_created     DateTime           @default(now()) @db.Timestamp(6)
  date_modified    DateTime?          @db.Timestamp(6)
  campaign_parties campaign_parties[]
}

model characters {
  id               Int                @id @default(autoincrement())
  image            String?            @db.VarChar
  name             String             @db.VarChar(100)
  race             String             @db.VarChar(50)
  char_class       String             @db.VarChar(50)
  sub_class        String?            @db.VarChar(100)
  level            Int
  strength         Int
  dexterity        Int
  constitution     Int
  intelligence     Int
  wisdom           Int
  charisma         Int
  hit_points       Int
  armour_class     Int
  movement_speed   Int
  date_modified    DateTime?          @db.Timestamp(6)
  party_characters party_characters[]
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model game_monsters {
  id         Int       @id @default(autoincrement())
  game_id    Int?
  monster_id Int?
  games      games?    @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_monsters_games_game_id_fk")
  monsters   monsters? @relation(fields: [monster_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_monsters_monsters_monster_id_fk")
}

model games {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(250)
  game_monsters game_monsters[]
}

model monsters {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  description   String?         @db.VarChar(250)
  game_monsters game_monsters[]
}

model parties {
  id               Int                @id @default(autoincrement())
  party_name       String             @db.VarChar(250)
  party_level      Int?
  date_created     DateTime           @default(now()) @db.Timestamp(6)
  date_modified    DateTime?          @db.Timestamp(6)
  campaign_parties campaign_parties[]
  party_characters party_characters[]
}

model party_characters {
  id           Int         @id @default(autoincrement())
  party_id     Int?
  character_id Int?
  characters   characters? @relation(fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "party_characters_characters_character_id_fk")
  parties      parties?    @relation(fields: [party_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "party_characters_parties_party_id_fk")
}

model user_characters {
  id                                        Int    @id @default(autoincrement())
  user_id                                   Int?
  character_id                              Int?
  users_user_characters_character_idTousers users? @relation("user_characters_character_idTousers", fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_characters_characters_character_id_fk")
  users_user_characters_user_idTousers      users? @relation("user_characters_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_characters_users_user_id_fk")
}

model users {
  id                                                  Int               @id @default(autoincrement())
  username                                            String            @db.VarChar(50)
  email                                               String            @db.VarChar(100)
  password                                            String            @db.VarChar(100)
  date_created                                        DateTime          @default(now()) @db.Timestamp(6)
  user_characters_user_characters_character_idTousers user_characters[] @relation("user_characters_character_idTousers")
  user_characters_user_characters_user_idTousers      user_characters[] @relation("user_characters_user_idTousers")
}
